---
- name: Ensure the backup has required parameters
  fail:
    msg: "Could not find mysql_backup, or missing required parameters"
  when:
    - _backup.source | default('') == ''
    - _backup.remotes | default([]) | length < 1
- debug: var=_backup
  when:
    - mysql_backup.debug | default(false) == true
- name: Check if the source configuration exists
  fail:
    msg: "Could not find source configuration {{ _backup.source }}"
  when:
    - mysql_backup.sources[_backup.source] is not defined
- name: Get the source configuration
  set_fact:
    _source: "{{ mysql_backup.sources[_backup.source] }}"
- name: Check if the mysql user is provided
  fail:
    msg: "Could not find MySQL username for {{ _backup.source }}"
  when:
    - _source.username is not defined
    - _source.usernameFile is not defined
- name: Check if the MySQL password is provided
  fail:
    msg: "Could not find SSH keys for {{ _backup.source }}"
  when:
    - _source.password is not defined
    - _source.passwordFile is not defined

- name: Generate the backup file prefix and suffix
  set_fact:
    _backup_file_prefix: "{{ _backup.database }}-{{ _source.host | default('localhost') }}-{{ _source.port | default('3306') | int }}"
    _backup_file_suffix: "sql.gz"
    
- name: Create a temp directory to hold the backup
  tempfile:
    state: directory
    prefix: "pantheon-backup"
  register: _run_temp_dir

- name: Generate the backup file path
  set_fact:
    _backup_file_path: "{{ _run_temp_dir.path }}/{{ _backup_file_prefix }}-0.{{ _backup_file_suffix }}"

- name: Backup database
  mysql_db:
    state: dump
    name: "{{ _backup.database }}"
    target: "{{ _backup_file_path }}"
    login_host: "{{ _source.host | default('localhost') }}"
    login_port: "{{ _source.port | default('3306') | int }}"
    client_cert: "{{ _source.tlsCertFile | default(omit) }}"
    client_key: "{{ _source.tlsKeyFile | default(omit) }}"
    login_user: "\
      {% if _source.usernameFile is defined %}\
      {{ lookup('file', _source.usernameFile) }}\
      {% else %}\
      {{ _source.username | default(omit) }}\
      {% endif %}"
    login_password: "\
      {% if _source.passwordFile is defined %}\
      {{ lookup('file', _source.passwordFile) }}\
      {% else %}\
      {{ _source.password | default(omit) }}\
      {% endif %}"
  no_log: "{{ mysql_backup.debug | default(false) | ternary(false, true) }}"

- name: Send backup to remotes                                                        
  include_tasks: 
    file: "\
      {% if _remote.type == 's3' %}\
      s3.yml\
      {% elif _remote.type == 'sftp' %}\
      sftp.yml\
      {% endif %}"
  loop: "{{ _backup.targets | default([]) }}"                                         
  loop_control:                                                                            
    label: "{{ _target.remote }}"
    loop_var: _target
  vars:                                                                                    
    _remote: "{{ mysql_backup.remotes[_target.remote] }}"                          
  when:                                                                                    
    - _target.remote is defined                                                             
    - _target.disabled | default(false) == false                                          
    - mysql_backup.remotes[_target.remote] is defined                               
    - mysql_backup.remotes[_target.remote].type is defined

- name: Clean up from the backup
  file:
    path: "{{ _run_temp_dir.path }}"
    state: absent

- include_tasks: "httpPing.yml"

